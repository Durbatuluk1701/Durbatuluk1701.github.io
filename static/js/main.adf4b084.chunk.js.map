{"version":3,"sources":["serviceWorker.js","TextBoxItem.tsx","Counter.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TextBoxItem","props","useState","words","setWords","map","word","fontWeight","includes","style","length","id","onClick","addBox","document","getElementById","textContent","addListItem","Counter","count","stringCount","state","setState","incrementCount","value","newNumber","newString","number","returnString","Math","floor","last3","toString","substr","concat","addDelimitersToInt","className","App","interval","addEventListener","string","title","setInterval","clearInterval","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCsBWC,EAtCa,SAACC,GAAW,IAAD,EACXC,mBAAmB,IADR,mBAC9BC,EAD8B,KACvBC,EADuB,KAYrC,OACE,6BACE,0CACA,6BAEID,EAAME,KAAI,SAACC,GACT,IAAIC,EAAa,CAAC,OAAQ,QAAQC,SAASF,GAAQ,IAAO,IAC1D,OACE,wBACEG,MAAO,CACL,WAAcF,EACd,QAAW,eACX,OAAU,yBAEXD,GAAQH,EAAMO,OAAS,GAAKP,EAAMA,EAAMO,OAAS,KAAOJ,EAAO,KAAO,UAMjF,2BAAOK,GAAG,cACV,4BAAQC,QAAS,YA5BD,WAClB,IAAIC,EAASC,SAASC,eAAe,aACjCF,GAAUA,EAAOG,aACnBZ,EAAS,CAACS,EAAOG,aAAT,mBAA0Bb,KAyBTc,KAAzB,cCaSC,EA9CS,SAACjB,GAAW,IAAD,EACPC,mBAAS,CAAEiB,MAAO,EAAGC,YAAa,MAD3B,mBAC1BC,EAD0B,KACnBC,EADmB,KAmB3BC,EAAiB,SAACC,GACtB,IAAMC,EAAYJ,EAAMF,MAAQK,EAC1BE,EAnBmB,SAACC,GAI1B,IAFA,IAAIC,EAAe,GAED,IAAXD,EAAcA,EAASE,KAAKC,MAAMH,EAAS,KAAO,CACvD,IAAII,EAAQJ,EAAOK,WAAWC,QAAQ,EAAG,GACzCL,EAAgBD,GAAU,IAAQ,IAAMI,EAAMG,OAAON,GAAgBG,EAAMG,OAAON,GAQpF,OAAQA,EAKUO,CAAmBV,GACrCH,EAAS,CACPH,MAAOM,EACPL,YAAaM,KAKjB,OACE,6BACE,yBAAKU,UAAU,SACb,sCACA,4BAAKf,EAAMD,cAEb,yBAAKgB,UAAU,WAPR,CAAC,EAAG,EAAG,GAAI,IAAK,KASd/B,KAAI,SAACmB,GACR,OAAQ,4BAAQZ,QAAS,WAAQW,EAAeC,MAAaA,EAAQ,EAAK,IAAM,IAAMA,EAAMQ,kBCV3FK,EA1BO,WAElB,IAAIC,EAgBJ,OAdA1C,OAAO2C,iBAAiB,QAAQ,WAC5B,IAAIC,EAAS,0BACb1B,SAAS2B,MAAQD,EACjBF,EAAWI,aAAY,WACrBF,EAASA,EAAOP,OAAO,EAAGO,EAAO9B,OAAO,GAAK8B,EAAO,GACpD1B,SAAS2B,MAAQD,IAChB,QAGL5C,OAAO2C,iBAAiB,SAAS,WAC/BI,cAAcL,GACdxB,SAAS2B,MAAQ,iBAIjB,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCpBZG,IAASC,OAAO,kBAAC,EAAD,MAAQ/B,SAASC,eAAe,SJ8H1C,kBAAmB+B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.adf4b084.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nconst TextBoxItem: React.FC = (props) => {\r\n    const [words, setWords] = useState<string[]>([]);\r\n  \r\n  \r\n  \r\n    const addListItem = () => {\r\n      let addBox = document.getElementById(\"listAdded\");\r\n      if (addBox && addBox.textContent) {\r\n        setWords([addBox.textContent , ...words]);\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h3>Word List:</h3>\r\n        <div>\r\n          {\r\n            words.map((word) => {\r\n              let fontWeight = [\"fizz\", \"buzz\"].includes(word) ? 1000 : 100;\r\n              return (\r\n                <h4\r\n                  style={{\r\n                    \"fontWeight\": fontWeight,\r\n                    \"display\": \"inline-block\",\r\n                    \"margin\": \"0px 2.5px 10px 2.5px\"\r\n                  }}>\r\n                  {word + (words.length > 1 && words[words.length - 1] !== word ? \", \" : \" \")}\r\n                </h4>\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n        <input id=\"listAdded\"></input>\r\n        <button onClick={() => { addListItem() }}>Add Item</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default TextBoxItem;","import React, { useState } from \"react\";\r\n\r\nconst Counter: React.FC = (props) => {\r\n    const [state, setState] = useState({ count: 0, stringCount: \"0\" });\r\n    const addDelimitersToInt = (number: number) => {\r\n      // Both rely on this returnString here\r\n      let returnString = \"\";\r\n      // Method 1\r\n      for (; number !== 0; number = Math.floor(number / 1000)) {\r\n        let last3 = number.toString().substr(-3, 3);\r\n        returnString = (number >= 1000) ? \",\" + last3.concat(returnString) : last3.concat(returnString);\r\n      }\r\n      // // Method 2\r\n      // while (number !== 0) {\r\n      //   let last3 = number.toString().substr(-3, 3);\r\n      //   returnString = (number >= 1000) ? \",\" + last3.concat(returnString) : last3.concat(returnString);\r\n      //   number = Math.floor(number / 1000);\r\n      // }\r\n      return (returnString);\r\n    }\r\n  \r\n    const incrementCount = (value: number) => {\r\n      const newNumber = state.count + value;\r\n      const newString = addDelimitersToInt(newNumber);\r\n      setState({\r\n        count: newNumber,\r\n        stringCount: newString\r\n      });\r\n    };\r\n  \r\n    let nums = [1, 5, 10, 100, 1000];\r\n    return (\r\n      <div>\r\n        <div className=\"count\">\r\n          <h3>Count:</h3>\r\n          <h1>{state.stringCount}</h1>\r\n        </div>\r\n        <div className=\"buttons\">\r\n          {\r\n            nums.map((value) => {\r\n              return (<button onClick={() => { incrementCount(value) }}>{((value > 0) ? \"+\" : \"\") + value.toString()}</button>);\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default Counter;","import React from \"react\"\r\nimport TextBoxItem from \"./TextBoxItem\"\r\nimport Counter from \"./Counter\"\r\n\r\nconst App: React.FC = () => {\r\n        \r\n    var interval: NodeJS.Timeout;\r\n  \r\n    window.addEventListener(\"blur\", () => {\r\n        var string = \"Come Back Soon!!!      \";\r\n        document.title = string;\r\n        interval = setInterval(() => {\r\n          string = string.substr(1, string.length-1) + string[0];\r\n          document.title = string;\r\n        }, 1000);\r\n      })\r\n    \r\n      window.addEventListener(\"focus\", () => {\r\n        clearInterval(interval);\r\n        document.title = \"Will Thomas\";\r\n      })\r\n\r\n    return (\r\n        <>\r\n            <Counter />\r\n            <TextBoxItem />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\"\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
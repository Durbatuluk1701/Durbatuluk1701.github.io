{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Counter","props","useState","count","stringCount","state","setState","incrementCount","value","newNumber","newString","number","returnString","Math","floor","last3","toString","substr","concat","addDelimitersToInt","class","map","onClick","TextBoxItem","words","setWords","interval","addEventListener","string","setInterval","length","document","title","clearInterval","word","style","includes","id","getElementById","ReactDOM","render","StrictMode","message","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdN,IAAMC,EAAU,SAACC,GAAW,IAAD,EACCC,mBAAS,CAAEC,MAAO,EAAGC,YAAa,MADnC,mBAClBC,EADkB,KACXC,EADW,KAmBnBC,EAAiB,SAACC,GACtB,IAAMC,EAAYJ,EAAMF,MAAQK,EAC1BE,EAnBmB,SAACC,GAI1B,IAFA,IAAIC,EAAe,GAED,IAAXD,EAAcA,EAASE,KAAKC,MAAMH,EAAS,KAAO,CACvD,IAAII,EAAQJ,EAAOK,WAAWC,QAAQ,EAAG,GACzCL,EAAgBD,GAAU,IAAQ,IAAMI,EAAMG,OAAON,GAAgBG,EAAMG,OAAON,GAQpF,OAAQA,EAKUO,CAAmBV,GACrCH,EAAS,CACPH,MAAOM,EACPL,YAAaM,KAKjB,OACE,6BACE,yBAAKU,MAAM,SACT,sCACA,4BAAKf,EAAMD,cAEb,yBAAKgB,MAAM,WAPJ,CAAC,EAAG,EAAG,GAAI,IAAK,KASdC,KAAI,SAACb,GACR,OAAQ,4BAAQc,QAAS,WAAQf,EAAeC,MAAaA,EAAQ,EAAK,IAAM,IAAMA,EAAMQ,kBAQlGO,EAAc,SAACtB,GAAW,IAAD,EACHC,mBAAS,IADN,mBACtBsB,EADsB,KACfC,EADe,KASzBC,EAAW,EAef,OAbA9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAIC,EAAS,0BACbF,EAAWG,aAAY,WACrBD,EAASA,EAAOX,OAAO,EAAGW,EAAOE,OAAO,GAAKF,EAAO,GACpDG,SAASC,MAAQJ,IAChB,QAGLhC,OAAO+B,iBAAiB,SAAS,WAC/BM,cAAcP,GACdK,SAASC,MAAQ,iBAIjB,6BACE,kBAAC,EAAD,MACA,6BACE,6BACE,0CACA,6BAEIR,EAAMH,KAAI,SAACa,GACT,OACE,wBACEC,MAAO,CACL,WAAa,GAAb,OAAiB,CAAC,OAAQ,QAAQC,SAASF,GAAQ,OAAS,UAC5D,QAAW,eACX,OAAU,yBAEXA,GAAQV,EAAMM,OAAS,GAAKN,EAAMA,EAAMM,OAAS,KAAOI,EAAO,KAAO,UAMjF,2BAAOG,GAAG,cACV,4BAAQf,QAAS,WAzCvBG,EAAS,CAACM,SAASO,eAAe,aAAa9B,OAAvC,mBAAiDgB,OAyCnD,gBAOVe,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAaC,QAAQ,QAEvBX,SAASO,eAAe,SDuBpB,kBAAmBK,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMR,a","file":"static/js/main.ae120f85.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nconst Counter = (props) => {\n  const [state, setState] = useState({ count: 0, stringCount: \"0\" });\n  const addDelimitersToInt = (number) => {\n    // Both rely on this returnString here\n    let returnString = \"\";\n    // Method 1\n    for (; number !== 0; number = Math.floor(number / 1000)) {\n      let last3 = number.toString().substr(-3, 3);\n      returnString = (number >= 1000) ? \",\" + last3.concat(returnString) : last3.concat(returnString);\n    }\n    // // Method 2\n    // while (number !== 0) {\n    //   let last3 = number.toString().substr(-3, 3);\n    //   returnString = (number >= 1000) ? \",\" + last3.concat(returnString) : last3.concat(returnString);\n    //   number = Math.floor(number / 1000);\n    // }\n    return (returnString);\n  }\n\n  const incrementCount = (value) => {\n    const newNumber = state.count + value;\n    const newString = addDelimitersToInt(newNumber);\n    setState({\n      count: newNumber,\n      stringCount: newString\n    });\n  };\n\n  let nums = [1, 5, 10, 100, 1000];\n  return (\n    <div>\n      <div class=\"count\">\n        <h3>Count:</h3>\n        <h1>{state.stringCount}</h1>\n      </div>\n      <div class=\"buttons\">\n        {\n          nums.map((value) => {\n            return (<button onClick={() => { incrementCount(value) }}>{((value > 0) ? \"+\" : \"\") + value.toString()}</button>);\n          })\n        }\n      </div>\n    </div>\n  );\n}\n\nconst TextBoxItem = (props) => {\n  const [words, setWords] = useState([]);\n\n\n\n  const addListItem = () => {\n    setWords([document.getElementById(\"listAdded\").value, ...words]);\n  }\n\n  var interval = 0;\n\n  window.addEventListener(\"blur\", () => {\n    var string = \"Come Back Soon!!!      \";\n    interval = setInterval(() => {\n      string = string.substr(1, string.length-1) + string[0];\n      document.title = string;\n    }, 1000);\n  })\n\n  window.addEventListener(\"focus\", () => {\n    clearInterval(interval);\n    document.title = \"Will Thomas\";\n  })\n\n  return (\n    <div>\n      <Counter />\n      <div>\n        <div>\n          <h3>Word List:</h3>\n          <div>\n            {\n              words.map((word) => {\n                return (\n                  <h4\n                    style={{\n                      \"fontWeight\": `${[\"fizz\", \"buzz\"].includes(word) ? \"bold\" : \"normal\"}`,\n                      \"display\": \"inline-block\",\n                      \"margin\": \"0px 2.5px 10px 2.5px\"\n                    }}>\n                    {word + (words.length > 1 && words[words.length - 1] !== word ? \", \" : \" \")}\n                  </h4>\n                )\n              })\n            }\n          </div>\n          <input id=\"listAdded\"></input>\n          <button onClick={() => { addListItem() }}>Add Item</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <TextBoxItem message=\"HI\" />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
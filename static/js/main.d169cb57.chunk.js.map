{"version":3,"sources":["serviceWorker.js","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","App","interval","useState","addEventListener","string","document","title","setInterval","substr","length","clearInterval","href","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCuDSC,EAjEO,WAAO,IAGvBC,EAHsB,EACgBC,mBAAS,KADzB,6BAK1BN,OAAOO,iBAAiB,QAAQ,WAC9B,IAAIC,EAAS,0BACbC,SAASC,MAAQF,EACjBH,EAAWM,aAAY,WACrBH,EAASA,EAAOI,OAAO,EAAGJ,EAAOK,OAAS,GAAKL,EAAO,GACtDC,SAASC,MAAQF,IAChB,QAGLR,OAAOO,iBAAiB,SAAS,WAC/BO,cAAcT,GACdI,SAASC,MAAQ,iBA8BnB,OACE,oCACH,2DAAgC,uBAAGK,KAAK,0CAAR,WCnDjCC,IAASC,OAAO,kBAAC,EAAD,MAAQR,SAASS,eAAe,SF8H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d169cb57.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { useState } from \"react\"\r\nimport TextBoxItem from \"./TextBoxItem\"\r\nimport Counter from \"./Counter\"\r\nimport SideBar from \"./SideBar\"\r\nimport DeadLanding from \"./DeadLanding\"\r\nimport AboutMe from \"./AboutMe\"\r\nimport Calculator from \"./Calculator\"\r\n\r\nconst App: React.FC = () => {\r\n  const [internalRoute, setInternalRoute] = useState(\"/\");\r\n\r\n  var interval: NodeJS.Timeout;\r\n\t\r\n  window.addEventListener(\"blur\", () => {\r\n    var string = \"Come Back Soon!!!      \";\r\n    document.title = string;\r\n    interval = setInterval(() => {\r\n      string = string.substr(1, string.length - 1) + string[0];\r\n      document.title = string;\r\n    }, 1000);\r\n  })\r\n\r\n  window.addEventListener(\"focus\", () => {\r\n    clearInterval(interval);\r\n    document.title = \"Will Thomas\";\r\n  })\r\n  const HomePage = () => {\r\n    return (\r\n      <div>\r\n        <h1>Hello There</h1>\r\n        <p style={{ fontSize: \"20px\" }}>\r\n          This is my website, it is mostly just an exploration\r\n          into how farm I can push the static site capabilities of\r\n          GitHub Pages with my own Internal Routing components I have\r\n          made for React. All of this can be pushed into a single file,\r\n          with React Conditional rendering based upon given paths and\r\n          the current state of the Internal Routing watch.\r\n          </p>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  interface RouteProps {\r\n    path: string;\r\n    component: JSX.Element\r\n  }\r\n\r\n  const Route = ({ path, component }: RouteProps): JSX.Element | null => {\r\n    if (internalRoute === path) {\r\n      return (component)\r\n    }\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n\t<h1>I've moved off this page to\t<a href=\"people.eecs.ku.edu/~w732t351/HomePage/\">here</a></h1>\r\n\t{/*\r\n      <SideBar internalController={setInternalRoute} />\r\n      <div className=\"mainSection\">\r\n        <Route path=\"/\" component={<HomePage />} />\r\n        <Route path=\"/home\" component={<HomePage />} />\r\n        <Route path=\"/counter\" component={<Counter />} />\r\n        <Route path=\"/textbox\" component={<TextBoxItem />} />\r\n        <Route path=\"/aboutme\" component={<AboutMe />} />\r\n        <Route path=\"/calculator\" component={<Calculator />} />\r\n        <Route path=\"/404\" component={<DeadLanding internalController={setInternalRoute} />} />\r\n      </div>\r\n\t*/}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\"\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}